/*----- PROTECTED REGION ID(WebAuthTng2.h) ENABLED START -----*/
//=============================================================================
//
// file :        WebAuthTng2.h
//
// description : Include file for the WebAuthTng2 class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef WebAuthTng2_H
#define WebAuthTng2_H

#include <tango.h>
#include <mysql.h>

#ifdef DBUSER
#ifdef DBPASS

#define USEDDB

#endif
#endif

/*----- PROTECTED REGION END -----*/	//	WebAuthTng2.h

/**
 *  WebAuthTng2 class description:
 *    Device server to provide basic web authorization and check access permissions.
 *    (MySQL database needed).
 */

namespace WebAuthTng2_ns
{
/*----- PROTECTED REGION ID(WebAuthTng2::Additional Class Declarations) ENABLED START -----*/

//    Additional Class Declarations
class MySQLError
{
public: const char* errorMessage;
    MySQLError(const char* err)
    {
            errorMessage = err;
    }
};

/*----- PROTECTED REGION END -----*/	//	WebAuthTng2::Additional Class Declarations

class WebAuthTng2 : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(WebAuthTng2::Data Members) ENABLED START -----*/

//    Add your own data members
private:
    MYSQL *connection;
    //    dbhost:    Db host
//    string    dbhost;
//    //    dbname:    Db name containing authorization information.
//    string    dbname;
//    //    dbuser:    Db User  to read authentication database.
//    string    dbuser;
    //    dbpass:    Db password to read authentication database.
//    string    dbpass;
    //    MailAgentDevice:    Tango device with mail-agent for sending email.
/*----- PROTECTED REGION END -----*/	//	WebAuthTng2::Data Members

//	Device property data members
public:
	//	dbhost:	Database host
	string	dbhost;
	//	dbname:	Db name containg the user information.
	string	dbname;
	//	dbuser:	Db User  to read authentication database.
	string	dbuser;
	//	dbpass:	Db password to read authentication database.
	string	dbpass;
	//	whitelistforlog:	
	vector<string>	whitelistforlog;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WebAuthTng2(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WebAuthTng2(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	WebAuthTng2(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~WebAuthTng2() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : WebAuthTng2::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : WebAuthTng2::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command check_permissions related method
	 *	Description: Checks opened session for given IP and PID, determines username and checks its access permissions.
	 *
	 *	@param argin Strings;
	 *               argin[0]:device;
	 *               argin[1]:cmd;
	 *               argin[2]:IP;
	 *               argin[3]:login;
	 *	@returns true if user can execute command or write attribute, false otherwise
	 */
	virtual Tango::DevBoolean check_permissions(const Tango::DevVarStringArray *argin);
	virtual bool is_check_permissions_allowed(const CORBA::Any &any);
	/**
	 *	Command check_user related method
	 *	Description: 
	 *
	 *	@param argin Strings;
	 *               argin[0]:login;
	 *               argin[1]:password;
	 *	@returns true if user was authorised
	 */
	virtual Tango::DevBoolean check_user(const Tango::DevVarStringArray *argin);
	virtual bool is_check_user_allowed(const CORBA::Any &any);
	/**
	 *	Command Send_log_command_ex related method
	 *	Description: Send log to DB about command execute
	 *
	 *	@param argin Strings:
	 *               [0] datetime in UNIX_TIMESTAMP formate
	 *               [1] username
	 *               [2] device_name
	 *               [3] ip
	 *               [4] command
	 *               [5] command in json
	 *               [6] access status
	 *	@returns 
	 */
	virtual Tango::DevBoolean send_log_command_ex(const Tango::DevVarStringArray *argin);
	virtual bool is_Send_log_command_ex_allowed(const CORBA::Any &any);
	/**
	 *	Command check_permissions_www related method
	 *	Description: For REST_DS
	 *
	 *	@param argin argin[0]:username;
	 *               argin[1]:password;
	 *               argin[2]:device;
	 *               argin[3]:cmd;
	 *               argin[4]:IP;
	 *	@returns Argout description:
	 *           Checks username/password pair and username permissions. Return values:
	 *            1: Authentication successfull, permissions checks sucessful
	 *            0: Permissions denied
	 *           -1: Wrong username/password
	 */
	virtual Tango::DevShort check_permissions_www(const Tango::DevVarStringArray *argin);
	virtual bool is_check_permissions_www_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : WebAuthTng2::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(WebAuthTng2::Additional Method prototypes) ENABLED START -----*/
private:
//    Additional Method prototypes
#ifdef USEDDB
    void initDbUserPass();
#endif
    void CheckError();
    void MysqlConnect();
    void MysqlPing();
    int getNumFields(string tableName);

/*----- PROTECTED REGION END -----*/	//	WebAuthTng2::Additional Method prototypes
};

/*----- PROTECTED REGION ID(WebAuthTng2::Additional Classes Definitions) ENABLED START -----*/

//    Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	WebAuthTng2::Additional Classes Definitions

}	//	End of namespace

#endif   //	WebAuthTng2_H
